// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  email          String      @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  bio            String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  accounts       Account[]
  UserType       UserType
  Developer      Developer[]
  Project        Project[]
  Employer       Employer[]
}

model Employer {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String @db.ObjectId
  user            User   @relation(fields: [userId], references: [id])
  // Other company-specific fields go here
  comapny_name    String
  company_website String
  jobs            Job[]
}

// Developers
model Developer {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  // Other developer-specific fields go here
  userId       String    @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
  githubLink   String?
  projects     Project[]
  linkedinLink String?
  role         Category?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  githubLink  String?
  liveLink    String?
  thumbnail   String?
  category    Category
  developerId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Developer   Developer @relation(fields: [developerId], references: [id])
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?   @db.ObjectId
}

model Job {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  comapny_name String
  description  String
  category     Category
  location     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Employer     Employer? @relation(fields: [employerId], references: [id])
  employerId   String?   @db.ObjectId
}

enum Category {
  Fullstack
  Frontend
  Backend
  Mobile
}

enum UserType {
  Developer
  Employer
}
